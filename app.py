import streamlit as st
import os
from rag_chain import EoraRAGChain


@st.cache_resource
def load_rag_chain():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ RAG chain"""
    chain = EoraRAGChain()
    data_path = os.getenv("DATA_PATH", "./data")

    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
        doc_count = chain.load_documents(data_path, include_web=True)
        if doc_count > 0:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {doc_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            st.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –≤–µ–±-–¥–∞–Ω–Ω—ã–º–∏")

    return chain


def format_sources(sources, complexity_level):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    if complexity_level == "easy":
        return ""

    source_list = []
    for i, source in enumerate(sources, 1):
        source_name = source.get("source_file", source.get("url", f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}"))
        source_list.append(f"[{i}] {source_name}")

    if complexity_level == "medium":
        return f"\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join([f'[{i}]' for i in range(1, len(sources) + 1)])}"

    return ""


def main():
    st.set_page_config(page_title="EORA AI Assistant", layout="wide")

    st.title("ü§ñ EORA AI Assistant")
    st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö")

    if not os.getenv("OPENAI_API_KEY"):
        st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        st.stop()

    try:
        rag_chain = load_rag_chain()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        st.stop()

    col1, col2 = st.columns([3, 1])

    with col2:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        complexity_level = st.selectbox(
            "–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞:",
            options=["easy", "medium", "hard"],
            format_func=lambda x: {
                "easy": "–ü—Ä–æ—Å—Ç–æ–π",
                "medium": "–°–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                "hard": "–° inline —Å—Å—ã–ª–∫–∞–º–∏",
            }[x],
        )

        st.markdown("---")
        st.markdown("**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**")
        st.markdown("- –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?")
        st.markdown("- –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è –ú–∞–≥–Ω–∏—Ç–∞?")
        st.markdown("- –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö AI —Ä–µ—à–µ–Ω–∏—è—Ö")

    with col1:
        st.subheader("–ß–∞—Ç")

        if "messages" not in st.session_state:
            st.session_state.messages = []

        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                if message["role"] == "assistant" and message.get("sources"):
                    with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", expanded=False):
                        for i, source in enumerate(message["sources"], 1):
                            source_name = source.get(
                                "source_file", source.get("url", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                            )
                            st.write(f"**[{i}]** {source_name}")

        if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å:"):
            st.session_state.messages.append({"role": "user", "content": prompt})

            with st.chat_message("user"):
                st.markdown(prompt)

            with st.chat_message("assistant"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
                    try:
                        result = rag_chain.generate_answer(prompt, complexity_level)

                        formatted_answer = result["answer"]
                        if complexity_level == "medium" and result["sources"]:
                            formatted_answer += format_sources(
                                result["sources"], complexity_level
                            )

                        st.markdown(formatted_answer)

                        st.session_state.messages.append(
                            {
                                "role": "assistant",
                                "content": formatted_answer,
                                "sources": result["sources"],
                            }
                        )

                        if result["sources"] and complexity_level != "easy":
                            with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", expanded=False):
                                for i, source in enumerate(result["sources"], 1):
                                    source_name = source.get(
                                        "source_file",
                                        source.get("url", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"),
                                    )
                                    st.write(f"**[{i}]** {source_name}")

                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                        st.error(error_msg)
                        st.session_state.messages.append(
                            {"role": "assistant", "content": error_msg, "sources": []}
                        )


if __name__ == "__main__":
    main()
